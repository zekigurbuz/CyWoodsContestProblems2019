#!/usr/bin/python
import sys
import os
import shutil
import subprocess
import pathlib
import tempfile
from termcolor import colored, cprint

quiet = False
verbose = False
def check_dir(directory):
    name = directory[2:].lower()
    files = [directory, f'{directory}/Sample/{name}.dat', f'{directory}/Sample/{name}.out', f'{directory}/Judge/{name}.dat', f'{directory}/Judge/{name}.out', f'{directory}/{directory[2:]}.docx']
    names = ['Problem Folder', 'Sample Data', 'Sample Out', 'Judge Data', 'Judge Out', 'Problem Statement']
    problems = []
    for i in range(len(files)):
        if not os.path.exists(files[i]) and not files[i].endswith('docx'):
            problems.append(names[i] + f' Does Not Exist For {directory[2:]}')
    if len(problems) != 0:
        return (False, '\n'.join(problems))
    return (True, f'All Files Present For {directory[2:]}')

def diff(first, second):
        for i in range(min(len(first),len(second))):
            if first[i] != second[i]:
                return (False,first[i],second[i],str(i+1))
        return (True,'','','')

def check_sol(directory, solution):
    shutil.copy(solution.path, '.workspace')
    try:
        subprocess.check_call(["javac", f'.workspace/{solution.name}'], stderr=open(os.devnull, 'w'))
    except:
        return (False,'Compilation Failed')
    try:
        os.chdir('.workspace')
        sol_out = subprocess.check_output(["java", solution.name[:-5]], stderr=open(os.devnull, 'w'))
        os.chdir('..')
    except:
        os.chdir('..')
        return (False, 'Running File Failed')
    samp_out = pathlib.Path(f'.workspace/{directory[2:].lower()}.out').read_text()
    sol = sol_out.decode('utf-8').replace('\r', '').split('\n')
    samp = samp_out.split('\n')
    d = diff(sol,samp)
    if d[0]:
        return (True, 'Incorrect')
    else:
        if quiet:
            return (False, 'Incorrect')
        else:
            return (False, f'Incorrect\nFirst Difference at line {d[3]}\n{d[1]}\n{d[2]}')


def check_sols(directory, solutions, student):
    name = directory[2:].lower()
    files = [directory, f'{directory}/Sample/{name}.dat', f'{directory}/Sample/{name}.out', f'{directory}/Judge/{name}.dat', f'{directory}/Judge/{name}.out', f'{directory}/{directory[2:]}.docx']
    if(student):
        shutil.copy(files[1], '.workspace')
        shutil.copy(files[2], '.workspace')
    else:
        shutil.copy(files[3], '.workspace')
        shutil.copy(files[4], '.workspace')
    ret = []
    work = 0
    for sol in os.scandir(solutions):
        if sol.name.endswith('java'):
            data = check_sol(directory,sol)
            if(data[0]):
                work += 1
            ret.append( (sol.name[:-5], data[0], data[1]) )
    return (ret, work)

def compare(directory, solution, student):
    name = directory[2:].lower()
    files = [directory, f'{directory}/Sample/{name}.dat', f'{directory}/Sample/{name}.out', f'{directory}/Judge/{name}.dat', f'{directory}/Judge/{name}.out', f'{directory}/{directory[2:]}.docx']
    if student:
        shutil.copy(files[1], '.workspace')
        shutil.copy(files[2], '.workspace')
    else:
        shutil.copy(files[3], '.workspace')
        shutil.copy(files[4], '.workspace')
    shutil.copy(solution, '.workspace')
    filename = solution[solution.rfind('/')+1:]
    try:
        subprocess.check_call(["javac", f'.workspace/{filename}'], stderr=open(os.devnull, 'w'))
    except:
        return (False,'Compilation Failed')
    try:
        os.chdir('.workspace')
        sol_out = subprocess.check_output(["java", solution[solution.rfind('/')+1:-5]], stderr=open(os.devnull, 'w'))
        os.chdir('..')
    except:
        os.chdir('..')
        return (False, 'Running File Failed')
    out = pathlib.Path(f'.workspace/{directory[2:].lower()}.out').read_text()
    return (True, sol_out, out.encode('utf-8'))

def run(directory, solution, student):
    name = directory[2:].lower()
    files = [directory, f'{directory}/Sample/{name}.dat', f'{directory}/Sample/{name}.out', f'{directory}/Judge/{name}.dat', f'{directory}/Judge/{name}.out', f'{directory}/{directory[2:]}.docx']
    if student:
        shutil.copy(files[1], '.workspace')
        shutil.copy(files[2], '.workspace')
    else:
        shutil.copy(files[3], '.workspace')
        shutil.copy(files[4], '.workspace')
    shutil.copy(solution, '.workspace')
    filename = solution[solution.rfind('/')+1:]
    subprocess.call(["javac", f'.workspace/{filename}'])
    os.chdir('.workspace')
    subprocess.call(["java", solution[solution.rfind('/')+1:-5]])
    os.chdir('..')

for arg in sys.argv:
    if arg == '--quiet':
        quiet = True
    if arg == '--verbose':
        verbose = True;

if len(sys.argv) < 2:
    print("Valid arguments are check, compare, or run")
elif sys.argv[1] == 'check':
    for prob in [f for f in os.scandir('.') if f.is_dir() and not f.name.startswith('.')]:
        if len(sys.argv) == 3:
            if prob.name != sys.argv[2]:
                continue
        (valid, message) = check_dir(prob.path)
        if valid:
            if not quiet:
                print(message)
            print(f'Checking {prob.name}')
            for f in os.walk(prob.path):
                if f[0].endswith('Solutions'):
                    (sols, work) = check_sols(prob.path, f[0], True)
                    if sols == 0:
                        continue
                    if len(sols) == work:
                        print(f'{prob.name} - Student - {work} / {len(sols)} Are Correct')
                    else:
                        cprint(f'{prob.name} - Student - {work} / {len(sols)} Are Correct', 'red')
                    if not quiet:
                        for sol in sols:
                            print(f'{sol[0]} - {"Correct" if sol[1] else sol[2]}')
                    (sols, work) = check_sols(prob.path, f[0], False)
                    if len(sols) == work:
                        print(f'{prob.name} - Judge - {work} / {len(sols)} Are Correct')
                    else:
                        cprint(f'{prob.name} - Judge - {work} / {len(sols)} Are Correct', 'red')
                    if not quiet:
                        for sol in sols:
                            if sol[1]:
                                print(f'{sol[0]} - {"Correct" if sol[1] else sol[2]}')
                            else:
                                cprint(f'{sol[0]} - {"Correct" if sol[1] else sol[2]}', 'red')

        else:
            print(f'{prob.name} Folder Structure is Invalid')
            if verbose:
                print(message)
        print('---')
elif sys.argv[1] == 'compare':
    if len(sys.argv) < 4:
        print("Too few arguments")
    elif not (sys.argv[3] == 'Sample' or sys.argv[3] == 'Judge'):
        print("Must compare against Sample or Judge")
    else:
        for prob in [f for f in os.scandir('.') if f.is_dir() and sys.argv[2].startswith(f.name)]:
            for f in os.walk(prob.path):
                if f[0].endswith('Solutions'):
                    data = compare(prob.path, f[0] + '/' + sys.argv[2] + '.java', sys.argv[3] == 'Sample')
                    if(data[0]):
                        with tempfile.NamedTemporaryFile(suffix=".tmp") as tf1:
                          tf1.write(data[1])
                          tf1.flush()
                          with tempfile.NamedTemporaryFile(suffix=".tmp") as tf2:
                              tf2.write(data[2])
                              tf2.flush()
                              subprocess.call(["vimdiff", tf1.name, tf2.name])
                    else:
                        print(data[1])
elif sys.argv[1] == 'run':
    if len(sys.argv) < 4:
        print("Too few arguments")
    else:
        for prob in [f for f in os.scandir('.') if f.is_dir() and sys.argv[2].startswith(f.name)]:
            for f in os.walk(prob.path):
                if f[0].endswith('Solutions'):
                    run(prob.path, f[0] + '/' + sys.argv[2] + '.java', sys.argv[3] == 'Sample')
elif sys.argv[1] == 'scoreboard':
    people = {}
    for prob in [f for f in os.scandir('.') if f.is_dir() and not f.name.startswith('.')]:
        (valid, message) = check_dir(prob.path)
        if valid:
            for f in os.walk(prob.path):
                if f[0].endswith('Solutions'):
                    (jsols, jwork) = check_sols(prob.path, f[0], False)
                    for sol in jsols:
                        if sol[1]:
                            name = sol[0][sol[0].rfind('_')+1:]
                            probName = sol[0][0:sol[0].rfind('_')]
                            if not name in people:
                                people[name] = []
                            people[name].append(probName)
    for name in people:
        print(f'{name} - {len(people[name])} Problems Solved')
        if not quiet:
            print(', '.join(people[name]))
elif sys.argv[1] == 'problems':
    probs = {}
    for prob in [f for f in os.scandir('.') if f.is_dir() and not f.name.startswith('.')]:
        probs[prob.name] = 0
        (valid, message) = check_dir(prob.path)
        if valid:
            for f in os.walk(prob.path):
                if f[0].endswith('Solutions'):
                    (jsols, jwork) = check_sols(prob.path, f[0], False)
                    for sol in jsols:
                        if sol[1]:
                            name = sol[0][sol[0].rfind('_')+1:]
                            probName = sol[0][0:sol[0].rfind('_')]
                            probs[probName] += 1
    for p in probs:
        print(f'{p:20} ({probs[p]:2} sols) |{"X"*probs[p]}')
            

